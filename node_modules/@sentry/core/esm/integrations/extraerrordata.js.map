{"version":3,"file":"extraerrordata.js","sourceRoot":"","sources":["../../src/integrations/extraerrordata.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAErE,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAS/C,uEAAuE;AACvE,MAAM,OAAO,cAAc;IAA3B;QACE;;WAEG;QACI,SAAI,GAAW,cAAc,CAAC,EAAE,CAAC;IAyE1C,CAAC;IAlEC;;OAEG;IACI,SAAS;QACd,uBAAuB,CAAC,KAAK,EAAE,KAAkB,EAAE,IAAsB,EAAE,EAAE;YAC3E,MAAM,IAAI,GAAG,aAAa,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,EAAE;gBACT,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,yBAAyB,CAAC,KAAkB,EAAE,IAAsB;QACzE,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEhE,IAAI,SAAS,EAAE;YACb,OAAO;gBACL,GAAG,KAAK;gBACR,KAAK,EAAE;oBACL,GAAG,KAAK,CAAC,KAAK;oBACd,GAAG,SAAS;iBACb;aACF,CAAC;SACH;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACK,gBAAgB,CAAC,KAAoB;QAC3C,uFAAuF;QACvF,IAAI;YACF,MAAM,UAAU,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;YAC5G,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;YAClD,MAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAElG,IAAI,SAAS,CAAC,MAAM,EAAE;gBACpB,MAAM,cAAc,GAA+B,EAAE,CAAC;gBACtD,KAAK,MAAM,GAAG,IAAI,SAAS,EAAE;oBAC3B,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;oBACvB,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE;wBAClB,KAAK,GAAI,KAAe,CAAC,IAAI,IAAK,KAAe,CAAC,WAAW,CAAC,IAAI,CAAC;qBACpE;oBACD,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;iBAC7B;gBACD,OAAO;oBACL,CAAC,IAAI,CAAC,EAAE,cAAc;iBACvB,CAAC;aACH;YAED,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,EAAE,EAAE;YACX,MAAM,CAAC,KAAK,CAAC,qDAAqD,EAAE,EAAE,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC;SACb;IACH,CAAC;;AAtED;;GAEG;AACW,iBAAE,GAAW,gBAAgB,CAAC","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, SentryEventHint } from '@sentry/types';\nimport { isError } from '@sentry/utils/is';\nimport { logger } from '../../../utils/logger';\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: unknown;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent, hint?: SentryEventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the SentryEvent\n   */\n  public enhanceEventWithErrorData(event: SentryEvent, hint?: SentryEventHint): SentryEvent {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n\n    const errorData = this.extractErrorData(hint.originalException);\n\n    if (errorData) {\n      return {\n        ...event,\n        extra: {\n          ...event.extra,\n          ...errorData,\n        },\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private extractErrorData(error: ExtendedError): { [key: string]: unknown } | null {\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      const name = error.name || error.constructor.name;\n      const errorKeys = Object.getOwnPropertyNames(error).filter(key => nativeKeys.indexOf(key) === -1);\n\n      if (errorKeys.length) {\n        const extraErrorInfo: { [key: string]: unknown } = {};\n        for (const key of errorKeys) {\n          let value = error[key];\n          if (isError(value)) {\n            value = (value as Error).name || (value as Error).constructor.name;\n          }\n          extraErrorInfo[key] = value;\n        }\n        return {\n          [name]: extraErrorInfo,\n        };\n      }\n\n      return null;\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n      return null;\n    }\n  }\n}\n"]}
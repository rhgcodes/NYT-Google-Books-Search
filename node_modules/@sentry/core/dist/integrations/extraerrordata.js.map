{"version":3,"file":"extraerrordata.js","sourceRoot":"","sources":["../../src/integrations/extraerrordata.ts"],"names":[],"mappings":";;;AAAA,mCAAqE;AAErE,uCAA2C;AAC3C,gDAA+C;AAS/C,uEAAuE;AACvE;IAAA;QACE;;WAEG;QACI,SAAI,GAAW,cAAc,CAAC,EAAE,CAAC;IAyE1C,CAAC;IAlEC;;OAEG;IACI,kCAAS,GAAhB;QAAA,iBAQC;QAPC,6BAAuB,CAAC,UAAO,KAAkB,EAAE,IAAsB;;;gBACjE,IAAI,GAAG,mBAAa,EAAE,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;gBAC5D,IAAI,CAAC,IAAI,EAAE;oBACT,sBAAO,KAAK,EAAC;iBACd;gBACD,sBAAO,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;;aACpD,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACI,kDAAyB,GAAhC,UAAiC,KAAkB,EAAE,IAAsB;QACzE,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,YAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE;YACxE,OAAO,KAAK,CAAC;SACd;QAED,IAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEhE,IAAI,SAAS,EAAE;YACb,4BACK,KAAK,IACR,KAAK,uBACA,KAAK,CAAC,KAAK,EACX,SAAS,KAEd;SACH;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACK,yCAAgB,GAAxB,UAAyB,KAAoB;;QAC3C,uFAAuF;QACvF,IAAI;YACF,IAAM,YAAU,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;YAC5G,IAAM,MAAI,GAAG,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;YAClD,IAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,YAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAA9B,CAA8B,CAAC,CAAC;YAElG,IAAI,SAAS,CAAC,MAAM,EAAE;gBACpB,IAAM,cAAc,GAA+B,EAAE,CAAC;;oBACtD,KAAkB,IAAA,cAAA,iBAAA,SAAS,CAAA,oCAAA,2DAAE;wBAAxB,IAAM,GAAG,sBAAA;wBACZ,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;wBACvB,IAAI,YAAO,CAAC,KAAK,CAAC,EAAE;4BAClB,KAAK,GAAI,KAAe,CAAC,IAAI,IAAK,KAAe,CAAC,WAAW,CAAC,IAAI,CAAC;yBACpE;wBACD,cAAc,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;qBAC7B;;;;;;;;;gBACD;oBACE,GAAC,MAAI,IAAG,cAAc;uBACtB;aACH;YAED,OAAO,IAAI,CAAC;SACb;QAAC,OAAO,EAAE,EAAE;YACX,eAAM,CAAC,KAAK,CAAC,qDAAqD,EAAE,EAAE,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAtED;;OAEG;IACW,iBAAE,GAAW,gBAAgB,CAAC;IAoE9C,qBAAC;CAAA,AA7ED,IA6EC;AA7EY,wCAAc","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, SentryEvent, SentryEventHint } from '@sentry/types';\nimport { isError } from '@sentry/utils/is';\nimport { logger } from '../../../utils/logger';\n\n/**\n * Just an Error object with arbitrary attributes attached to it.\n */\ninterface ExtendedError extends Error {\n  [key: string]: unknown;\n}\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class ExtraErrorData implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = ExtraErrorData.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ExtraErrorData';\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor(async (event: SentryEvent, hint?: SentryEventHint) => {\n      const self = getCurrentHub().getIntegration(ExtraErrorData);\n      if (!self) {\n        return event;\n      }\n      return self.enhanceEventWithErrorData(event, hint);\n    });\n  }\n\n  /**\n   * Attaches extracted information from the Error object to extra field in the SentryEvent\n   */\n  public enhanceEventWithErrorData(event: SentryEvent, hint?: SentryEventHint): SentryEvent {\n    if (!hint || !hint.originalException || !isError(hint.originalException)) {\n      return event;\n    }\n\n    const errorData = this.extractErrorData(hint.originalException);\n\n    if (errorData) {\n      return {\n        ...event,\n        extra: {\n          ...event.extra,\n          ...errorData,\n        },\n      };\n    }\n\n    return event;\n  }\n\n  /**\n   * Extract extra information from the Error object\n   */\n  private extractErrorData(error: ExtendedError): { [key: string]: unknown } | null {\n    // We are trying to enhance already existing event, so no harm done if it won't succeed\n    try {\n      const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber'];\n      const name = error.name || error.constructor.name;\n      const errorKeys = Object.getOwnPropertyNames(error).filter(key => nativeKeys.indexOf(key) === -1);\n\n      if (errorKeys.length) {\n        const extraErrorInfo: { [key: string]: unknown } = {};\n        for (const key of errorKeys) {\n          let value = error[key];\n          if (isError(value)) {\n            value = (value as Error).name || (value as Error).constructor.name;\n          }\n          extraErrorInfo[key] = value;\n        }\n        return {\n          [name]: extraErrorInfo,\n        };\n      }\n\n      return null;\n    } catch (oO) {\n      logger.error('Unable to extract extra data from the Error object:', oO);\n      return null;\n    }\n  }\n}\n"]}
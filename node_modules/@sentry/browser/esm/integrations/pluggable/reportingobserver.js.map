{"version":3,"file":"reportingobserver.js","sourceRoot":"","sources":["../../../src/integrations/pluggable/reportingobserver.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAExE,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,yBAAyB,EAAE,MAAM,wBAAwB,CAAC;AAUnE,YAAY;AACZ,IAAK,WAOJ;AAPD,WAAK,WAAW;IACd,YAAY;IACZ,8BAAe,CAAA;IACf,YAAY;IACZ,0CAA2B,CAAA;IAC3B,YAAY;IACZ,4CAA6B,CAAA;AAC/B,CAAC,EAPI,WAAW,KAAX,WAAW,QAOf;AAiCD,mEAAmE;AACnE,MAAM,OAAO,iBAAiB;IAU5B;;OAEG;IACH,YACmB,UAEb;QACF,KAAK,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,YAAY,CAAC;KAC9E;QAJgB,YAAO,GAAP,OAAO,CAIvB;QAjBH;;WAEG;QACa,SAAI,GAAW,iBAAiB,CAAC,EAAE,CAAC;IAejD,CAAC;IAEJ;;OAEG;IACI,SAAS;QACd,IAAI,CAAC,yBAAyB,EAAE,EAAE;YAChC,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,KAAK,eAAe,EAEnC,CAAC,iBAAiB,EAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YAC5C,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;SAC1B,CAAC,CAAC;QAEH,QAAQ,CAAC,OAAO,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,OAAO,CAAC,OAAiB;QAC9B,IAAI,CAAC,aAAa,EAAE,CAAC,cAAc,CAAC,iBAAiB,CAAC,EAAE;YACtD,OAAO;SACR;QACD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,SAAS,CAAC,KAAK,CAAC,EAAE;gBAChB,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;gBAElC,MAAM,KAAK,GAAG,sBAAsB,MAAM,CAAC,IAAI,GAAG,CAAC;gBACnD,IAAI,OAAO,GAAG,sBAAsB,CAAC;gBAErC,IAAI,MAAM,CAAC,IAAI,EAAE;oBACf,0EAA0E;oBAC1E,MAAM,SAAS,GAEX,EAAE,CAAC;oBAEP,iCAAiC;oBACjC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,IAAI,EAAE;wBAC9B,SAAS,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACrC;oBAED,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;oBAElC,IAAI,MAAM,CAAC,IAAI,KAAK,WAAW,CAAC,KAAK,EAAE;wBACrC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAuB,CAAC;wBAC5C,+EAA+E;wBAC/E,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC;qBAC/E;yBAAM;wBACL,MAAM,IAAI,GAAG,MAAM,CAAC,IAAsD,CAAC;wBAC3E,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC;qBACnC;iBACF;gBAED,cAAc,CAAC,GAAG,KAAK,KAAK,OAAO,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;;AA1ED;;GAEG;AACW,oBAAE,GAAW,mBAAmB,CAAC","sourcesContent":["import { captureMessage, getCurrentHub, withScope } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\nimport { supportsReportingObserver } from '@sentry/utils/supports';\n\n/** JSDoc */\ninterface Report {\n  [key: string]: any;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\n/** JSDoc */\nenum ReportTypes {\n  /** JSDoc */\n  Crash = 'crash',\n  /** JSDoc */\n  Deprecation = 'deprecation',\n  /** JSDoc */\n  Intervention = 'intervention',\n}\n\n/** JSDoc */\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\n/** JSDoc */\ninterface CrashReportBody {\n  [key: string]: any;\n  crashId: string;\n  reason?: string;\n}\n\n/** JSDoc */\ninterface DeprecationReportBody {\n  [key: string]: any;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** JSDoc */\ninterface InterventionReportBody {\n  [key: string]: any;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\n/** Reporting API integration - https://w3c.github.io/reporting/ */\nexport class ReportingObserver implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = ReportingObserver.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'ReportingObserver';\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    private readonly options: {\n      types?: ReportTypes[];\n    } = {\n      types: [ReportTypes.Crash, ReportTypes.Deprecation, ReportTypes.Intervention],\n    },\n  ) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!supportsReportingObserver()) {\n      return;\n    }\n\n    const observer = new (getGlobalObject() as {\n      ReportingObserver: any;\n    }).ReportingObserver(this.handler.bind(this), {\n      buffered: true,\n      types: this.options.types,\n    });\n\n    observer.observe();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public handler(reports: Report[]): void {\n    if (!getCurrentHub().getIntegration(ReportingObserver)) {\n      return;\n    }\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inheirted\n          const plainBody: {\n            [key: string]: any;\n          } = {};\n\n          // tslint:disable-next-line:forin\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === ReportTypes.Crash) {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n}\n"]}
{"version":3,"file":"ember.js","sourceRoot":"","sources":["../../../src/integrations/pluggable/ember.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,aAAa,EAAS,SAAS,EAAE,MAAM,cAAc,CAAC;AAEjG,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAErD,YAAY;AACZ,MAAM,OAAO,KAAK;IAehB;;OAEG;IACH,YAAmB,UAA2B,EAAE;QAjBhD;;WAEG;QACI,SAAI,GAAW,KAAK,CAAC,EAAE,CAAC;QAe7B,IAAI,CAAC,KAAK;YACR,OAAO,CAAC,KAAK;gBACZ,eAAe,EAEd,CAAC,KAAK,CAAC;IACb,CAAC;IAED;;OAEG;IACI,SAAS;QACd,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO;SACR;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAEtC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,KAAY,EAAQ,EAAE;YAC1C,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACzC,SAAS,CAAC,KAAK,CAAC,EAAE;oBAChB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;oBACpC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC;aACJ;YAED,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;gBACpC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACpC;iBAAM,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBAC7B,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAChB,OAAO,EACP,CAAC,MAAW,EAAQ,EAAE;YACpB,IAAI,aAAa,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;gBACzC,SAAS,CAAC,KAAK,CAAC,EAAE;oBAChB,IAAI,MAAM,YAAY,KAAK,EAAE;wBAC3B,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,kCAAkC,CAAC,CAAC;wBAC9D,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;wBACpC,gBAAgB,CAAC,MAAM,CAAC,CAAC;qBAC1B;yBAAM;wBACL,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;wBACjC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;wBACpC,cAAc,CAAC,kCAAkC,CAAC,CAAC;qBACpD;gBACH,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;OAGG;IACK,uBAAuB,CAAC,KAAY;QAC1C,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAkB,EAAE,EAAE;YACnD,IAAI,KAAK,CAAC,GAAG,EAAE;gBACb,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE,CAAC;gBAClD,KAAK,CAAC,GAAG,GAAG;oBACV,GAAG,KAAK,CAAC,GAAG;oBACZ,YAAY,EAAE,CAAC,GAAG,YAAY,EAAE,OAAO,CAAC;iBACzC,CAAC;aACH;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;;AAjFD;;GAEG;AACW,QAAE,GAAW,OAAO,CAAC","sourcesContent":["import { captureException, captureMessage, getCurrentHub, Scope, withScope } from '@sentry/core';\nimport { Integration, SentryEvent } from '@sentry/types';\nimport { getGlobalObject } from '@sentry/utils/misc';\n\n/** JSDoc */\nexport class Ember implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = Ember.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Ember';\n\n  /**\n   * @inheritDoc\n   */\n  private readonly Ember: any; // tslint:disable-line:variable-name\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { Ember?: any } = {}) {\n    this.Ember =\n      options.Ember ||\n      (getGlobalObject() as {\n        Ember: any;\n      }).Ember;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    if (!this.Ember) {\n      return;\n    }\n\n    const oldOnError = this.Ember.onerror;\n\n    this.Ember.onerror = (error: Error): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        withScope(scope => {\n          this.addIntegrationToSdkInfo(scope);\n          captureException(error);\n        });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this.Ember, error);\n      } else if (this.Ember.testing) {\n        throw error;\n      }\n    };\n\n    this.Ember.RSVP.on(\n      'error',\n      (reason: any): void => {\n        if (getCurrentHub().getIntegration(Ember)) {\n          withScope(scope => {\n            if (reason instanceof Error) {\n              scope.setExtra('context', 'Unhandled Promise error detected');\n              this.addIntegrationToSdkInfo(scope);\n              captureException(reason);\n            } else {\n              scope.setExtra('reason', reason);\n              this.addIntegrationToSdkInfo(scope);\n              captureMessage('Unhandled Promise error detected');\n            }\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Appends SDK integrations\n   * @param scope The scope currently used.\n   */\n  private addIntegrationToSdkInfo(scope: Scope): void {\n    scope.addEventProcessor(async (event: SentryEvent) => {\n      if (event.sdk) {\n        const integrations = event.sdk.integrations || [];\n        event.sdk = {\n          ...event.sdk,\n          integrations: [...integrations, 'ember'],\n        };\n      }\n      return event;\n    });\n  }\n}\n"]}